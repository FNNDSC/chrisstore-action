name: "ChRIS Store Upload"
description: "Upload a ChRIS plugin's JSON representation to the ChRIS Store"
author: "FNNDSC"

inputs:
  descriptor_file:
    description: Path to JSON representation of ChRIS plugin
    required: true
  dock_image:
    description: Container image manifest tag
    required: false
  name:
    description: Plugin name
    required: false
    default: ''
  public_repo:
    description: Source code repository URL
    required: false
    default: ''
  auth:
    description: 'ChRIS store user, in the format "username:password"'
    required: true
  url:
    description: 'URL of ChRIS store'
    required: false
    default: "https://chrisstore.co/api/v1/"

  chris_admin_auth:
    description: 'ChRIS backend superuser, in the format "username:password"'
    required: false
    default: ''
  chris_admin_url:
    description: 'ChRIS backend /chris-admin/api/v1/ endpoint URL'
    required: false
    default: ''
  compute_resources:
    description: 'Compute resources to register this plugin to.'
    required: false
    default: ''

outputs:
  plugin_url:
    description: "URL of created plugin"
    value: "${{ steps.upload.outputs.href }}"
  plugin_cube_url:
    description: "URL of plugin in CUBE."
    value: "${{ steps.cube.outputs.url }}"
runs:
  using: "composite"
  steps:
    - name: Plugin Information
      id: info
      shell: bash
      run: |
        name="${{ inputs.name }}"
        if [ -z "$name" ]; then
          name="$(sed 's/^.*\///' <<< ${{ github.repository }})"
        fi

        dock_image="${{ inputs.dock_image }}"
        if [ -z "$dock_image" ]; then
          if ! [[ "${{ github.ref }}" = "refs/tags/"* ]]; then
            echo "::error ::dock_image not given, and cannot automatically determine git tag"
            exit 1
          fi
          repo="${{ github.repository }}"
          repo="${repo,,}"

          tag="${{ github.ref }}"
          tag="${tag##*/}"
          if [[ "$tag" =~ ^v[0-9].* ]]; then
            tag="${tag:1}"
          fi

          dock_image="$repo:$tag"
          dock_image="${dock_image,,}"  # to lower case
        fi
        if ! [[ "$dock_image" = *":"* ]]; then
          echo "::error ::dock_image=$dock_image is not tagged by version"
          exit 1
        fi
        if [[ "$dock_image" = *":latest" ]]; then
          echo "::error ::dock_image=$dock_image cannot end with :latest"
          exit 1
        fi

        public_repo="${{ inputs.public_repo }}"
        if [ -z "$public_repo" ]; then
          public_repo="https://github.com/${{ github.repository }}"
        fi

        echo "::set-output name=name::$name"
        echo "::set-output name=dock_image::$dock_image"
        echo "::set-output name=public_repo::$public_repo"

    - name: Upload to ChRIS Store
      id: upload
      shell: bash
      run: |
        set +e  # let us handle error, instead of stopping silently
        # --fail-with-body not supported in this version of curl
        res=$(
          curl -s --show-error -u "${{ inputs.auth }}" \
            "${{ inputs.url }}plugins/" \
            -H 'Accept:application/vnd.collection+json' \
            -F "name=${{ steps.info.outputs.name }}" \
            -F "dock_image=${{ steps.info.outputs.dock_image }}"  \
            -F "descriptor_file=@${{ inputs.descriptor_file }}" \
            -F "public_repo=${{ steps.info.outputs.public_repo }}"
        )
        success=$?
        echo "::debug::$res"
        if [ "$success" = "0" ]; then
          href="$(jq -r '.collection.items[0].href' <<< "$res")"
          echo "::set-output name=href::$href"
          if [ "$href" = "null" ]; then
            success=1
          else
            echo "$href"
          fi
        fi
        if [ "$success" != "0" ]; then
          echo "::error ::Failed upload to ChRIS Store"
          echo "::error ::response: $res"
          exit $success
        fi

    - name: Register to CUBE
      id: cube
      shell: bash
      if: ${{ inputs.chris_admin_url }}
      run: |
        if [ -z "${{ inputs.chris_admin_auth }}" ]; then
          echo "::error ::chris_admin_auth is required"
          exit 1
        fi

        if [ -z "${{ inputs.compute_resources }}" ]; then
          echo "::error ::chris_admin_auth is required"
          exit 1
        fi

        set +e  # let us handle error, instead of stopping silently

        # split csv into array
        IFS=',' read -ra compute_resources <<< "${{ inputs.compute_resources }}"

        for cr in "${compute_resources[@]}"; do
          >&2 echo "${{ steps.upload.outputs.href }} --> $cr"

          res="$(
            curl -s --show-error \
              -u "${{ inputs.chris_admin_auth }}" \
              "${{ inputs.chris_admin_url }}" \
              -H 'Accept: application/json' \
              -H 'Content-Type: application/json' \
              --data '{"compute_name": "'$cr'", "plugin_store_url": "${{ steps.upload.outputs.href }}"}'
          )"

          success=$?
          echo "::debug::$res"
          if [ "$success" = "0" ] \
              && url="$(jq -r '.url' <<< "$res")" \
              && [ "$url" = "null" ]; then
            success=1
          fi

          if [ "$success" != "0" ]; then
            echo "::error ::Failed to register plugin to CUBE."
            echo "::error ::response: $res"
            exit $success
          fi
        done

        echo "::set-output name=url::$url"

        >&2 echo ""
        >&2 echo "$url"


branding:
  color: "blue"
  icon: "shopping-bag"
